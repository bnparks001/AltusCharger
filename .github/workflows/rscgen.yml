name: KiCAD Resource Generator

on:
  push:
    branches:
      - master
    paths:
      - '**.kicad_sch'
      - '**.kicad_pcb'
      
concurrency:
  group: ${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  gen-resources:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      # 1) Check out the repository so we can modify files
      - name: Check out code
        uses: actions/checkout@v3

      # 2) Set up Docker.
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
  
      # 3) Pull KiCAD Docker Image.
      - name: Pull KiCad Docker image
        run: |
          echo "Pulling KiCad Docker image..."
          docker pull kicad/kicad:nightly-full
  
      # 4) Set up directory permissions.
      - name: Set directory permissions
        run: |
          echo "Setting directory permissions to 777..."
          sudo chmod -R 777 .
  
      # 5) Export schematic, PCB, and 3D model.
      - name: Export schematic, PCB, and 3D model
        run: |
          # Export schematic
          
          # Go into Hardware
          cd Hardware
          for dir in *
          do
            # Check if KiCAD Directory exists.
            echo $dir
            if [ -d $dir/kicad ]; then
              echo "Found kicad Directory! Exporting schematic, PCB, and 3D model..."
              docker run --rm -v "${{ github.workspace }}/Hardware:/Hardware" -w /Hardware/$dir kicad/kicad:nightly-full bash -c "
                # Export KiCAD 8 and 9 model dirs
                export KICAD8_3DMODEL_DIR=/usr/share/kicad/3dmodels/
                export KICAD9_3DMODEL_DIR=/usr/share/kicad/3dmodels/

                # Clean output directors if needed.
                rm -rf gen

                # Make file structure
                mkdir -p gen
                mkdir -p gen/images
                mkdir -p gen/3d

                # Loop through schematic files.
                cd kicad/
                for filename in *.kicad_sch
                do
                  # Generate image export of that file.
                  filename=\${filename%.*}
                  echo Processing schematic: \$filename
                  kicad-cli sch export svg -o ../gen/images/tmp \${filename}.kicad_sch
                  mv ../gen/images/tmp/\${filename}.svg ../gen/images/\${filename}_sch.svg
                done
                cd ../
                rm -rf gen/images/tmp
          
                # Export PCB front
                kicad-cli pcb export svg --mode-single -o 'gen/images/pcb_front.svg' --page-size-mode 2 --exclude-drawing-sheet --layers 'F.Cu,F.SilkS,F.Mask,Edge.Cuts' kicad/*.kicad_pcb
          
                # Export PCB back
                kicad-cli pcb export svg --mode-single -o 'gen/images/pcb_back.svg' --page-size-mode 2 -m --exclude-drawing-sheet --layers 'B.Cu,B.SilkS,B.Mask,Edge.Cuts' kicad/*.kicad_pcb
          
                # Export 3D model (tolerate warnings, check output)
                kicad-cli pcb export step --output 'gen/3d/pcb_model.step' kicad/*.kicad_pcb || echo \"Warning: STEP export encountered issues, checking output...\"
                if [ -f gen/3d/pcb_model.step ]; then
                  echo \"STEP file created successfully.\"
                else
                  echo \"Error: STEP file not created.\"
                fi
              "
              else
                echo Did not find kicad Directory!
              fi
          done;
          cd ../

      # 6) Generate cool looking lit images
      - name: Generate cool looking lit images
        run: |
          # Go into Hardware
          cd Hardware
          for dir in *
          do
            # Check if KiCAD Directory exists.
            if [ -d $dir/kicad ]; then
              echo "Found kicad Directory! Exporting schematic, PCB, and 3D model..."
              docker run --rm -v "${{ github.workspace }}/Hardware:/Hardware" -w /Hardware/$dir kicad/kicad:nightly-full bash -c '
                init_dir=$(pwd)
                set -e
                export KICAD8_3DMODEL_DIR=/usr/share/kicad/3dmodels/
                
                # Confirm image directory.
                mkdir -p gen/images

                # Export VRML file from kicad
                kicad-cli pcb export vrml --output "gen/images/board.wrl" kicad/*.kicad_pcb

                # Step 2: Install Rayhunter
                echo "Installing Rayhunter..."
                mkdir -p ~/Downloads
                cd ~/Downloads
                sudo apt-get update
                sudo apt-get install -y wget libpng-dev
                wget https://master.dl.sourceforge.net/project/castle-engine/rayhunter/rayhunter-1.3.4-linux-x86_64.tar.gz
                tar xzvf rayhunter-1.3.4-linux-x86_64.tar.gz
                sudo install -m 0755 ~/Downloads/rayhunter/rayhunter /usr/local/bin/rayhunter

                cd $init_dir/gen/images
                head -1 "board.wrl" > "board.front.wrl"
                cat <<EOF >> "board.front.wrl"
          Transform {
              children [
                DirectionalLight {
                    on TRUE
                    intensity 0.63
                    ambientIntensity 0.21
                    color 1.0 1.0 1.0
                    direction 0.1 -0.1 -1
                }
          EOF
                cat "board.wrl" >> "board.front.wrl"
                echo "] }" >> "board.front.wrl"
      
                # Convert to PNG using Rayhunter FRONT
                echo "Converting /$init_dir/gen/images/board.front.wrl to board.front.png..."
                rayhunter classic 7 \
                    4320 4320 \
                    "/$init_dir/gen/images/board.front.wrl" \
                    "/$init_dir/gen/images/board.front.png" \
                    --camera-pos 0 0 6 \
                    --camera-dir 0 0 -1 \
                    --scene-bg-color 0 0 1 \
                    --ortho -2 -2 2 2
                    
                # Add lighting effects to VRML BACK
                cd $init_dir/gen/images
                head -1 "board.wrl" > "board.back.wrl"
                cat <<EOF >> "board.back.wrl"
          Transform {
              children [
                DirectionalLight {
                    on TRUE
                    intensity 0.8
                    ambientIntensity 0.3
                    color 1.0 1.0 1.0
                    direction 0.0 0.0 1.0
                }   
          EOF
                cat "board.wrl" >> "board.back.wrl"
                echo "] }" >> "board.back.wrl"
      
                # Convert to PNG using Rayhunter BACK
                echo "Converting /$init_dir/gen/images/board.back.wrl to board.back.png..."
                rayhunter classic 7 \
                    4320 4320 \
                    "board.back.wrl" \
                    "board.back.png" \
                    --camera-pos 0 0 -6 \
                    --camera-dir 0 0 1 \
                    --scene-bg-color 0 0 1 \
                    --ortho -2 -2 2 2
                
                # Step 5: Crop Imgae
                sudo apt install -y sed
                sudo apt install -y inkscape
                
                convert /$init_dir/gen/images/board.front.png -trim -transparent blue /$init_dir/gen/images/board.front.png
                convert /$init_dir/gen/images/board.back.png -trim -transparent blue /$init_dir/gen/images/board.back.png
                sed -i 's/fill="white"/fill="none"/g' /$init_dir/gen/images/pcb_front.svg
                sed -i 's/fill="white"/fill="none"/g' /$init_dir/gen/images/pcb_back.svg
                
                inkscape --export-area-drawing --export-filename=pcb_front.svg pcb_front.svg
                inkscape --export-area-drawing --export-filename=pcb_back.svg pcb_back.svg
      
      
                echo "Script execution completed."
              '
            else
              echo Did not find kicad Directory!
            fi
          done;
          cd ../

      # 7) Configure Git user/email
      - name: Configure Git
        run: |
          git config user.name "Kicad Export Generator"
          git config user.email "KiCADGenetator[bot]@users.noreply.github.com"

      # 8) Commit and push changes to main using the GitHub App token
      - name: Commit gen files with app token
        run: |
          git add **/gen/*
          git commit -m "Update autogen files" || echo "No changes to commit."
          git remote set-url origin "https://x-access-token:${{ steps.create_app_token.outputs.token }}@github.com/${{ github.repository }}.git"
          git push origin master

      # 9) Notify completion
      - name: Notify completion
        run: echo "Updates gen/images and pushed changes to the repository."
